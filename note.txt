															             BASIC LINUX
====================================== Cài đặt môi trường ======================================
- Các biến thể Linux - Linux Distro:
  Tiêu chế chọn hệ điều hành Linux để dùng
	1- Cho server hay desktop hay iOT
	2- Nếu là desktop:
		- Cần có giao diện đẹp, dễ dùng: Ubuntu, Linux Mint, ElementaryOS
		- Nhiều gói ứng dụng office: LibreOffice, xử lý đồ họa: Gimf
		- Liên tục cập nhật, kiểm tra xem lần cập nhật gần đây nhất của hệ điều hành đó là khi nào
	3- Nếu là server:
		- Kiến trúc mà hệ điều hành này hỗ trợ: Intel 32 Bit, 64 Bit hay là có hỗ trợ ARM hay không
		- Mức độ bảo mật: CentOS, RedHat, Debian
		- Trên máy chủ thì thường cài các phần mềm như: PHP, NodeJs, Python, Rails -> cần phải cài đặt dễ
			dàng các gói phần mềm này
		- Càng nhỏ, càng nhẹ càng tốt. Vì nhiều hệ điều hành chung nhau trên 1 máy chủ vật lý thì RAM, CPU sẽ 
			chia sẻ với nhau do đó nếu hệ điều hành của mình tốn nhiều dung lượng ổ cứng và RAM thì không tốt
	4- iOT
		- Hỗ trợ các loại chíp ARM
		- Nhỏ, nhẹ, hỗ trợ giao tiếp với các cổng(port), hỗ trợ các chuẩn kết nối với nhau
	Trang web tham khảo các thông tin: https://distrowatch.com/
	Cách xem thông tin:
		Last Update: Ngày cập nhật gần nhất
		OS Type: Hệ điều hành là hệ điều hành gì
		Based on: Kế thừa từ đâu
		Origin: Xuất xứ từ đâu
		Architecture: Kiến trúc CPU nó hỗ trợ(x86_64 -> 32bit và 64bit)
		Desktop: Trình quản lý desktop. Đối với những hệ điều hành Linux nó có giao diện
			Khi sử dụng Linux thì nên sử dụng hệ điều hành server(cần nhẹ nhất), sử dụng desktop thì dùng window hoặc mac. 
				Thông thường thì riêng phần trình quản lý giao diện thôi chiếm khoảng 500M, vì khá nặng nên không nên dùng hệ 
				điều hành desktop để cài trên máy chủ
	Debian: Là 1 hệ điều hành rất phổ biến, từ nó đã sinh ra rất nhiều hệ điều hành khác nhau trong đó đáng kể đến đó là
		Ubuntu
	RedHat cũng rất phổ biến, thường thì RedHat cho các hệ điều hành máy chủ server, từ nó đã sinh ra các hệ điều hành khác
		đáng kể đó là CentOS
	Linux family tree
- Cài đặt Ubuntu Server:
	Keyword: Set Up a Local Linux Environment with Vagrant
	Tạo môi trường thực hành Linux với môi trường là máy ảo Ubuntu Server sử dụng công cụ là Virtualbox kết hợp với Vagrant
	Với cách này thì có thể cài máy ảo ở trên mọi hệ điều hành
	Để dễ thao tác thì nên cài thêm phần mềm nữa đó là Git 
	Link download:
		Virtualbox: https://www.virtualbox.org/wiki/Downloads
		Vagrant: https://www.vagrantup.com/downloads.html
	Thứ tự cài đó là: Git, Virtualbox, Vagrant
	Chú ý đó là cần phải cài Virtualbox trước rồi mới cài Vagrant bởi vì Vagrant sẽ sử dụng Virtualbox
	VirtualBox: Là phần mềm tạo máy ảo, giả lập môi trường hệ điều hành khác mà không cần cài lại hệ điều hành
	Vagrant: Công cụ xây dựng và quản lý máy ảo qua các dòng lệnh
		Tham khảo các lệnh trong Vagrant: https://www.vagrantup.com/docs/cli/
		Để kiểm tra xem Vagrant đã được cài đặt xong chưa: vagrant -v
	Sau khi cài xong các phần mềm cần thiết thì tiến hành dựng máy ảo
		Tạo folder Ubuntu server, folder này sẽ chứa toàn bộ data của máy ảo
		Git bash here tại thư mục Ubuntu server, nó giống như là Terminal ở trên các hệ điều hành Linux
		pwd: In ra đường dẫn đầy đủ đến thư mục hiện hành(Lệnh của Linux)
		touch Vagrantfile: Tạo ra 1 file mới có tên là Vagrantfile, file này không có đuôi, đây sẽ là file để cấu hình
		Mở thư mục này lên và điền vào nội dung:
			Vagrant.configure(2) do |config|
					config.vm.box = "ubuntu/xenial64"
					config.vm.hostname = "local-server"
					config.vm.network "private_network", ip: "172.20.20.20"

					config.vm.provider "virtualbox" do |vb|
							vb.gui = false
							vb.memory = 2048
							vb.cpus = 1
					end
			end
		Tên hệ điều hành: ubuntu/xenial64
		Tên host: local-server
		Loại mạng: private_network
		ip: 172.20.20.20
		RAM: 2048
		CPU: 1
		vagrant up: Bắt đầu quá trình cài đặt máy ảo, sau khi câu lệnh được hoàn thành thì ta đã có 1 máy ảo là Ubuntu Server
		Kiểm tra lại ở trong VirtualBox
		vagrant ssh: Để kết nối remote vào trong máy ảo -> kết nối với server
			password mặc định là vagrant
		ifconfig: Sau khi kết nối với server, dùng lệnh này để kiểm tra địa chỉ ip của server, địa chỉ này giống với địa chỉ đã
			cấu hình ở Vagrantfile
		exit: Đóng kết nối
		vagrant halt: Tắt máy ảo -> Kiểm tra lại ở trong VirtualBox thì lúc này trạng thái của máy ảo chuyển sang trạng thái power off
		Nếu username có tên là username, directory của home là /home(thư mục username nằm ngay trong home) thì:
			cd ~: Trở về thư mục gốc username là /home/username
			<=>cd /home/username
		cd ../: Quay trỏ lại thư mục chứa nó
		cd /: Quay trở về vị trí cao nhất
		./foldername: Vào foldername cùng cấp với vị trí hiện tại
		ls: List ra file và thư mục nằm trong thư mục hiện hành
		cat <tên file>: Đọc và in nội dung file ra màn hình
		mkdir: Tạo thư mục mới vào trong thư mục hiện hành(make directory)
		rmdir: Xóa 1 thư mục(remove directory) 
		rm <tên file>: Xóa file
		cp <file nguồn> <file đích>  sao chép file từ vị trí nguồn đến vị trí đích.
		mv <nguồn> <đích>  di chuyển một file hoặc thư mục từ vị trí này sang vị trí khác. Lệnh này cũng dùng để đổi tên file hoặc thư 
			mục nếu như <nguồn> và <đích> là cùng một thư mục.
		Ngoài việc sử dụng vagrant để cài đặt máy ảo Linux thì nó còn cho phép ta cấu hình, cài đặt luôn các phầm mềm khác ở trong máy ảo
		Nhờ file cấu hình Vagrantfile thì chúng ta có thể chia sẻ môi trường làm việc với người khác bằng cách copy file Vagrantfile sau
			đó chay vagrant up

====================================== File và Folder ======================================
- Một số lệnh cơ bản:
	Các thao tác cơ bản với file trong Linux
	Ở trên các hệ điều hành server thì không có giao diện, mà chỉ tương tác với tệp và thư mục qua các câu lệnh
	pwd: Print Working Directory, lệnh này hiển thị ra thư mục hiện hành
	cd ..: Thoát ra khỏi thư mục
	ls: Kiểm tra toàn bộ các file và thư mục có trong thư mục hiện tại
	mkdir: Make Directory -> tạo thư mục mới
		mkdir <tên thư mục>
	mkdir -p: Tạo ra 1 cây thư mục
		mkdir -p Demo3/Demo4/Demo5
	touch: Tạo file
		touch <tên file>
	echo <nội dung> > <tên file>: Vừa tạo file và vừa ghi nội dung cho nó
	rm <tên file>: Remove -> để xóa 1 file
	rmdir <tên thư mục>: Remove Directory -> Xóa thư mục
	rm -r <têm thư mục>: remove directories and their contents recursively -> Xóa thư mục và toàn bộ các file, thư mục nằm ở bên trong
	cp <file nguồn> <file đích> sao chép file từ vị trí nguồn đến vị trí đích
	cp -r <thư mục nguồn> <thư mục đích>: sao chép thư mục và toàn bộ dữ liệu bên trong.
	mv <tên file> <thư mục đích>: Move file đến 1 thư mục nào đó
- Tìm kiếm file, thư mục:
	Keyword: find command in Linux
	Cách tìm các tệp, thư mục để thực hiện 1 thao tác nào đó khi nhớ mang máng tên của nó hoặc chỉ nhớ vị trí đại khái -> không thể dùng
		lệnh cd và ls để tìm được mà phải dùng lệnh tìm kiếm
		-> dùng lệnh find, lệnh này cho phép người dùng tìm file nếu mà biết gần đúng tên file
	find .: Liệt kê tất cả các file
	find . -name <tên file>: Tìm kiếm theo tên file -> kết quả sẽ in ra đường dẫn tuyệt đối của file
		Ở câu lệnh này thì khi tìm kiếm sẽ có phân biệt cả chữ hoa chữ thường
	find . -iname <tên file>: Tìm kiếm theo tên file -> kết quả sẽ in ra đường dẫn tuyệt đối của file
		Tìm kiếm mà không phân biệt chữ hoa và chữ thường
	find -name qua*.txt: Tìm tập tin có đuôi là txt mà tên được bắt đầu là qua
	find . -name quang\*: Tìm kiếm tất cả các tập tin và thư mục nằm trong thư mục hiện hành có bắt đầu là quang
	find -type f -name '*txt': Tìm kiếm tất cả các file có đuôi là .txt

- Cách sử dụng vim để mở và edit file trên server:
	Keyword: How to quit the vi/vim editor without saving your changes
	vim quang.txt: Mở file quang.txt bằng trình soạn thảo vim
	Các bước để thoát khỏi vim và không thực hiện lưu file đã mở:
		- Nhấn phím Esc
		- Gõ dấu :
		- Nhập q! và nhấn Ennter
	Các bước để mở file trên server bằng vim rồi sửa file sau đó lưu lại:
		vim quang.txt: Mở file quang.txt bằng vim
		Nhấn phím 'i' để có thể sửa file(mode lúc này là insert, ở phía dưới của vim có hiển thị lên -- INSERT --) -> sửa file
		Nhấn phím Esc sau khi sửa xong
		:w: Lưu file đã sửa
		:q: Thoát
		Sau đó có thể dùng lệnh cat để xem lại nội dung file trên:
			cat quang.txt
	
====================================== Users và Groups ======================================
- Users và Groups:
	Mỗi người dùng sẽ có 1 tài khoản để truy cập vào máy, sau khi đăng nhập xong thì người dùng mới có thể sử dụng tài nguyên
		ở trên máy
	Mỗi username có 1 tài khoản gồm có username và passwd dùng để đăng nhập, dựa vào tài khoản đó thì hệ thống sẽ cấp quyền truy
		cập hay là tương tác với các tài nguyên ở trên máy cho từng user
	Mỗi user sẽ nằm trong 1 hay nhiều group
	Group là các nhóm user với 1 quyền hạn cụ thể nào đó
	Ngoài tên ra thì mỗi user có 1 id để định danh gọi là UID, UID(userID) này là duy nhất, không trùng lặp
	Tương tự như user thì mỗi group cũng có 1 group để định danh gọi là GID(groupID)
	Mỗi user đều có 1 thư mục gọi là Home Directory, mỗi lần đăng nhập vào hệ thống thì thư mục hiện hành cũng chính là thư mục
		home này
	pwd: Kiểm tra thư mục hiện hành. Với tài khoản vagrant vừa được tạo ra thì thư mục hiện hành sẽ là /home/vagrant
	cat /etc/passwd: Xem thông tin của các user, file này là file Read-Only, chỉ có quyền đọc mà không có quyền sửa bởi vì mặc định
		tài khoản username đã tạo là tại khoản thường, không phải là tài khoản có quyền sửa file hệ thống
		Nội dung của file này sẽ gồm nhiều dòng, mỗi dòng là thông tin của 1 user
			vagrant:x:1000:1000:,,,:/home/vagrant:/bin/bash
		Trong mỗi 1 dòng được chia làm 7 phần được ngăn cách mới nhau bởi dấu 2 chấm theo thứ tự:
			User Name
			Password mã hóa
			UID
			GID
			Comment
			Home Directory
			Login Shell
		User đầu tiên là 1 user đặc biệt, đây là supper user, là user có quyền cao nhất trong hệ thống
			root:x:0:0:root:/root:/bin/bash
		Các Password ở file này hiển thị lên đều là x vì đang sử dụng chế độ là Shadow Password, khi gõ mật khẩu thì sẽ không hiển thị
			lên bất kỳ 1 ký tự nào
		Thông tin của password được lưu ở trong 1 file khác đó là /etc/shadow
	/etc/group: file này chứa thông tin của các group
		sudo:x:27:ubuntu
		root:x:0:
		vagrant:x:1000:
		Ở mỗi dòng sẽ là thông tin của 1 group, chỉ bao gồm 4 phần:
			Group Name
			Password được mã hóa
			GID: group ID
			List Users: Danh sách các user nằm trong group đó
	Thực hành 1 số lệnh về user và group
		Keyword: Linux command cheat sheet user group
		useradd [USERNAME]: Thêm 1 user mới, nhưng chỉ có user root mới có thể add user hay group vào hệ thống
		Dùng sudo để lấy quyền root tạm thời để thêm user mới:
			sudo useradd quang -> thêm 1 user mới có tên là quang(password là vagrant)
		Để Switch sang tài khoản mới vừa tạo:
			su - quang(nhập password của tài khoản là vagrant vào là ok)
		Dùng tài khoản là quang này để add thêm 1 tài khoản mới:
			sudo useradd testadd
			-> quang is not in the sudoers file.  This incident will be reported. Nghĩa là tài khoản này không nằm trong nhóm
				tài khoản có quyền sudo
		cat /etc/group để đọc thì thấy rằng trong nhóm sudo không có user là quang
		Để thêm user là quang vào trong group sudo thì dùng lệnh sau:
			sudo usermod -aG sudo quang
- Phân quyền User và Group:
	Một file trong Linux sẽ được phân quyền truy cập đối với 3 đối tượng:
		Owner: Chủ sở hữu
		Group: Nhóm sở hữu
		Others: Các user khác mà không nằm trong 2 nhóm trên
		Các quyền truy cập có thể là: Read and write hoặc Read-only
	Đăng nhập vào một tài khoản khác: su
		su <tên tài khoản>
	Kiểm tra xem tài khoản đang đăng nhập là tài khoản nào:
		whoami
	Phân quyền cho cả 1 thư mục nào đó, như vậy thì các file trong thư mục này sẽ được bảo mật hơn, các user khác sẽ không đọc được
		ls -la: Để xem cấu trúc của 1 tập tin, thư mục
			Hiện nay trong thư mục của user vagrant có 1 folder quang và 1 file quang.txt:
			drwxrwxr-x 3 vagrant vagrant 4096 Jul  7 10:24 quang
			-rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
				-> Giá trị đầu tiên là loại file: d có nghĩa là thư mục
					r(read): Quyền đọc file/folder(được biểu diễn bằng số 4)
					w(write): Quyền ghi/sửa nội dung file/folder(được biểu diễn bằng số 2)
					x(execute): Quyền thực thi(truy cập). Đối với thư mục thì cần phải có quyền execute thì mới dùng lệnh cd để truy cập vào được
						(được biểu diễn bằng số 1)
					-(Deny): Không có quyền(được biểu diễn bằng số 0)
		chmod 770 quang: Cấp quyền truy cập đầy đủ(rwx: đọc, ghi/sửa, truy cập vào thư mục) cho chủ sở hữu(vagrant), nhóm quản trị(những
			users thuộc group mà chủ sở hữu(vagrant) của thư mục này), các user khác trên máy thì không có quyền gì 
		su quang: Đăng nhập lại vào với tài khoản là quang
		ls: Để list các folder, file có trong home/vagrant: quang, quang.txt
		cd quang: Truy cập vào folder quang
		Permission denied
	Xem danh sách Group mà một User đã tham gia:
		id [tên user]
	Phân quyền với group:
		Đăng nhập bằng tài khoản là vagrant
		Tạo thêm 1 group mới tên là friend:
			sudo groupadd friend
		Cho tài khoản là quang vào trong group friend này:
			sudo usermod -aG friend quang
		Kiểm tra lại thông tin của group:
			cat /etc/group
			->friend:x:1003:quang
			Thấy rằng group friend đã có user là quang
		Có thể xem danh sách Group mà user quang đã tham gia:
			id quang
			->uid=1002(quang) gid=1002(quang) groups=1002(quang),27(sudo),1003(friend)
			id vagrant
			-> uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant)
		-> Phân quyền cho group friend cho phép đọc, ghi hay truy cập folder quang nằm trong /home/vagrant thì mặc định user quang cũng có 
			quyền đọc, ghi hay truy cập vào thư mục /home/vagrant/quang
    
  Thực hành phân quyền user và group bằng command line:
    ls -l: Kiểm tra quyền truy cập vào 1 file hay thư mục, muốn xem thêm cả những file ẩn thì thêm tham số là -a
      drwxrwx--- 3 vagrant vagrant 4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
      Để xem quyền hạn của file hay thư mục thì xem ở phần đầu tiên, ở ký hiệu đầu tiên:
        d: Thư mục(directory)
        -: File
      Các ký tự tiếp theo được chia làm 3 phần, mỗi phần có 3 ký tự, nó là phân quyền tương ứng với cả Owner(chủ sở hữu file or thư mục), 
        Group và Others(các người dùng khác)
      Có 3 ký tự để mô tả quyền:
        r: Read là quyền đọc, đối với file là xem nội dung file còn đối với thư mục thì là xem danh sách bên trong thư mục
        w: Write là quyền ghi, đối với file thì là thay đổi nội dung file, còn đổi thư mục thì là di chuyển hay là thay đổi tên thư mục
        x: Execute là quyền là quyền thực thi, nó cho phép thực thi 1 file nếu đó là 1 file chương trình, còn đối với thư mục thì nó cho
          phép di chuyển vào bên trong thư mục và thao tác với các thư mục con ở bên trong
      Giá trị tiếp theo là ai là chủ sở hữu(Owner) của file hay thư mục, nhóm sở hữu(group) là gì
    Chuyển nhóm sở hữu của 1 thư mục: chgrp <tên group> <tên thư mục>: Để thay đổi group
      vagrant@local-server:~$ ls -l
      total 8
      drwxrwx--- 3 vagrant vagrant 4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
      vagrant@local-server:~$ sudo chgrp friend quang
      vagrant@local-server:~$ ls -l
      total 8
      drwxrwx--- 3 vagrant friend  4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
      -> Kiểm tra lại thì thấy rằng thư mục quang đã có group là friend
        Thư mục quang ban đầu thuộc nhóm sở hữu là vagrant, quyền của Others là --- nên user quang thuộc nhóm friend sẽ không có quyền làm  
          gì cả. Nhưng sau khi chuyển nhóm sở hữu vagrant -> friend thì user thuộc nhóm friend cũng có các quyền truy cập, đọc và ghi
        vagrant@local-server:~$ su quang
        quang@local-server:/home/vagrant$ cd quang/
        quang@local-server:/home/vagrant/quang$ ls
        quang1  quang2.txt
      Tạo 1 folder mới có tên là project, truy cập vào folder đó và tạo thêm file mới đó là index.html, thay đổi quyền truy cập cho file đó 
        thành Read Only đối với cả 3 đối tượng(Owner, Group và Others)
        vagrant@local-server:~$ mkdir project
        vagrant@local-server:~$ cd project/
        vagrant@local-server:~/project$ touch index.html
        vagrant@local-server:~/project$ ls -l
        total 0
        -rw-rw-r-- 1 vagrant vagrant 0 Jul 13 09:27 index.html
        vagrant@local-server:~/project$ chmod 444 index.html
        vagrant@local-server:~/project$ ls -l
        total 0
        -r--r--r-- 1 vagrant vagrant 0 Jul 13 09:27 index.html
        vagrant@local-server:~/project$ rm index.html
        rm: remove write-protected regular empty file 'index.html'? y
        vagrant@local-server:~/project$ ls -l
        total 0
        -> Lúc này khi thực hiện xóa file index.html thì sẽ có cảnh báo có muốn xóa file mà không có quyền ghi hay không, nhưng vẫn xóa thành
          công
      -> Để không cho phép xóa file thì cần phân quyền cho thư mục chứa file(trong trường hợp này là thư mục project) bằng cách gỡ bỏ quyền 
        Execute của thư mục -> khi đó sẽ không thể cd vào trong thư mục được hay xóa file ở trong thư mục được nữa
          vagrant@local-server:~/project$ touch index.html
          vagrant@local-server:~/project$ ls -l
          total 0
          -rw-rw-r-- 1 vagrant vagrant 0 Jul 13 09:44 index.html
          vagrant@local-server:~/project$ cd ..
          vagrant@local-server:~$ chmod 666 project/
          drw-rw-rw- 2 vagrant vagrant 4096 Jul 13 09:44 project
          drwxrwxrwx 3 vagrant friend  4096 Jul  7 10:24 quang
          -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
          vagrant@local-server:~$ cd project/
          -bash: cd: project/: Permission denied
          vagrant@local-server:~$ rm project/index.html
          rm: cannot remove 'project/index.html': Permission denied
  Có lệnh thông dụng nhất khi phân quyền đó là chown và chmod:
    chown: Dùng để thay đổi quyền sở hữu của tập tin, chmod dùng để gán hoặc loại bỏ quyền
    Thư mục project đang thuộc quyền sở hữu của user và nhóm sở hữu của thư mục này là test
    Dùng lệnh chown để thay đổi cả Owner lẫn group
    Cú pháp: chown <tên user>:<tên group> <tên file/tên thư mục>
    Trong trường hợp không thể thay đổi được sang user hoặc group khác thì phải dùng sudo -> sudo chown <tên user>:<tên group> <tên file/tên thư mục>
      vagrant@local-server:~$ ls -l
      total 12
      drwxrwxrwx 2 quang   test    4096 Jul 13 09:53 project
      drwxrwxrwx 3 quang   friend  4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
      vagrant@local-server:~$ chown vagrant:quang project/
      chown: changing ownership of 'project/': Operation not permitted
      vagrant@local-server:~$ sudo chown vagrant:quang project/
      vagrant@local-server:~$ ls -l
      total 12
      drwxrwxrwx 2 vagrant quang   4096 Jul 13 09:53 project
      drwxrwxrwx 3 quang   friend  4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
    Để áp dụng quyền sở hữu cho toàn bộ file và thư mục con nằm ở bên trong nữa thì dùng thêm tham số là -R
      -> sudo chown -R <tên user>:<tên group> <tên file/tên thư mục>
      Việc này cho phép thay đổi owner của thư mục và toàn bộ file và thư mục con của nó cũng thay đổi theo
      vagrant@local-server:~$ ls -l
      total 12
      drwxrwxrwx 3 vagrant quang   4096 Jul 13 10:36 project
      drwxrwxrwx 3 quang   friend  4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
      vagrant@local-server:~$ cd project/
      vagrant@local-server:~/project$ ls -l
      total 4
      -rw-rw-r-- 1 quang   quang      0 Jul 13 10:36 file1.txt
      -r--r--r-- 1 vagrant vagrant    0 Jul 13 09:44 index.htmml
      drwxrwxr-x 2 quang   quang   4096 Jul 13 10:36 quang1
      vagrant@local-server:~/project$ cd ..
      vagrant@local-server:~$ sudo chown -R vagrant:test project/
      vagrant@local-server:~$ ls -l
      total 12
      drwxrwxrwx 3 vagrant test    4096 Jul 13 10:36 project
      drwxrwxrwx 3 quang   friend  4096 Jul  7 10:24 quang
      -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
      vagrant@local-server:~$ cd project/
      vagrant@local-server:~/project$ ls -l
      total 4
      -rw-rw-r-- 1 vagrant test    0 Jul 13 10:36 file1.txt
      -r--r--r-- 1 vagrant test    0 Jul 13 09:44 index.htmml
      drwxrwxr-x 2 vagrant test 4096 Jul 13 10:36 quang1
      vagrant@local-server:~/project$
    chmod: Dùng để thêm bớt các quyền như là read, write và execute cho các đối tượng
    Cú pháp: chmod <quyền> <file/directory>
    Ở phần quyền này thì có 2 cách để thể hiện:
      Sử dụng các ký tự chữ cái: r(read), w(write), x(execute), u(phân quyền cho Owner), g(phân quyền cho group), o(phân quyền cho Others)
        a(phân quyền cho cả 3 đối tượng)
        +: Dùng để thêm quyền
        -: Dùng để bớt Quyền
        =: Để thiết lập quyền 1 cách chính xác
        Trong trường hợp áp dụng phân quyền cho 2 đối tượng cùng 1 lúc thì viết liền nhau và phân cách nhau bởi dấu phẩy
          vagrant@local-server:~$ ls -l
          total 12
          drwxrwxrwx 3 quang   quang   4096 Jul 13 10:36 project
          drwxrwxrwx 3 quang   friend  4096 Jul  7 10:24 quang
          -rw-rw-r-- 1 vagrant vagrant   48 Jul  7 11:13 quang.txt
          vagrant@local-server:~$ cd project/
          vagrant@local-server:~/project$ ls -l
          total 4
          -rw-rw-r-- 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod u+x file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rwxrw-r-- 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod g-w file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rwxr--r-- 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod o=rx file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rwxr--r-x 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod u-x,g+w file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rw-rw-r-x 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
      Sử dụng chữ số trong hệ bát phân(các số từ 0 đến 7) để mô tả quyền. Có 3 đối tượng được phân quyền đó là Owner, group và user thì 
        sẽ được mô tả bởi 3 chữ số
        Số 4: Quyền đọc(r)
        Số 2: Quyền ghi(w)
        Số 1: Quyền thực thi(x)
        Số 0: Không có quyền nào(-)
        Số 5: Chỉ có 2 quyền là read và execute
        Số 7: Có đầy đủ 3 quyền read, write và execute
          vagrant@local-server:~/project$ ls -l
          total 4
          -rw-rw-r-x 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod 777 file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rwxrwxrwx 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod 755 file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rwxr-xr-x 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1
          vagrant@local-server:~/project$ sudo chmod 700 file1.txt
          vagrant@local-server:~/project$ ls -l
          total 4
          -rwx------ 1 quang quang    0 Jul 13 10:36 file1.txt
          -r--r--r-- 1 quang quang    0 Jul 13 09:44 index.htmml
          drwxrwxr-x 2 quang quang 4096 Jul 13 10:36 quang1

====================================== Cài đặt phần mềm ======================================
- Package management:
  Khi quản lý 1 server Linux thì công việc tốn khá nhiều time đó là cài đặt, cấu hình các phần mềm
  Trong hệ điều hành Linux thì đều có sẵn các công cụ để quản lý việc cài đặt, cập nhật hay gỡ bỏ các 
    gói phần mềm không cần thiết
  Ứng với mỗi hệ điều hành thì sẽ có 1 số công cụ quản lý phần mềm riêng
    Ubuntu và Debian có dpkg, apt, apt-get
    Fedora và CentOS có rmp, yum
    MacOS có homebrew
  Ở Ubuntu phiên bản 14 trở lên có 1 công cụ là apt còn đối với các bản Ubuntu cũ hơn hay dòng Debian thì
    có apt-get
  apt-get cũng là 1 phần mềm hay gọi là Package, nó dùng để quản lý các Package khác
  Để xem các lệnh của apt-get: apt-get --help
    -> các lệnh hay dùng đó là: update, upgrade, install, remove...
    Lệnh update lại các thông tin của các gói phần mềm ở trên máy
      -> sudo apt-get update
  Trước khi cài đặt 1 Package nào đó thì nên chạy lệnh update để lấy thông tin mới nhất, version mới nhất của
    package
  Để cài 1 package thì dùng lệnh: sudo apt-get install
    sudo apt-get install fortune-mod
    package này có tác dụng hiển thị lên 1 câu ngạn ngữ, danh ngôn hay 1 đoạn văn bất kỳ bằng tiếng anh
    Trước khi cài thì sẽ có các thông báo hiển thị:
      The following additional packages will be installed:
        fortunes-min librecode0
      Suggested packages:
        fortunes x11-utils
      The following NEW packages will be installed:
        fortune-mod fortunes-min librecode0
      Ở thông báo này có nghĩa là có package đi kèm sẽ được cài đặt cùng đó là: fortunes-min librecode0
    Khi cài đặt xong thì có thể sử dụng được fortune chỉ đơn giản là gõ lệnh fortune
  Để kiểm tra file chạy của package ở đâu thì dùng lệnh which: which fortune
    vagrant@local-server:~$ which fortune
    /usr/games/fortune
  Xóa package: sudo apt-get remove fortune-mod
    The following packages were automatically installed and are no longer required:
      fortunes-min librecode0
    Use 'sudo apt autoremove' to remove them.
    The following packages will be REMOVED:
      fortune-mod
    0 upgraded, 0 newly installed, 1 to remove and 15 not upgraded.
    After this operation, 141 kB disk space will be freed.
    Do you want to continue? [Y/n] y
  Xóa kiểu trên thì nó sẽ không xóa các file cấu hình, để xóa được các file cấu hình thì dùng thêm tham Số
    là --purge
    sudo apt-get remove --purge fortune-mod
  Kiểm tra lại dùng lệnh which: which fortune
    ->Không tìm thấy file cấu hình nữa, có nghĩa là nó đã được remove
  dpkg -l: Hiển thị tất cả các package mà ta đã cài ở trên máy
    ii  fortunes-min       1:1.99.1-7     all 
    ii  librecode0:amd64   3.6-22         amd64 
    ...
  dpkg -l | grep fortune: Lọc các kết quả có chứa chữ fortune
    ii  fortunes-min                     1:1.99.1-7 
    sudo apt-get remove --purge fortunes-min
    sudo apt-get remove --purge librecode0
  Để nâng cấp phiên bản của 1 package: apt-get install --only-upgrade [tên package]
- Repositories:
  Cài đặt phền mềm trên Window: Khi cài đặt 1 ứng dụng trên window thì phải vào trang web của nhà xuất bản 
    và download bộ cài đặt về máy
  Cài đặt phần mềm trên Linux: Trên Linux có 1 nơi để chứa toàn bộ những phần mềm mà chứng ta có thể cài đặt
    gọi là Repository
  Repository là 1 kho chứa các phần mềm đã được kiểm duyệt và xây dựng cụ thể cho các phiên bản của hệ điều 
    hành Linux, nó giúp chúng ta cài đặt phần mềm dễ dàng hơn và bảo mật hơn, tránh được các phần mềm độc hại
  Để giúp việc cài đặt phần mềm được thực hiện nhanh nhất thì 1 hệ điều hành sẽ cung cấp nhiều Repositories ở
   các địa điểm khác nhau
  Với hệ điều hành Ubuntu thì ở Mỹ thì có thể tải phần mềm về ở địa chỉ là us.archive.ubuntu.com, còn ở Việt
    Nam thì tải về từ địa chỉ là vn.archive.ubuntu.com
  Cài đặt phần mềm là cowsay: sudo apt install cowsay
    Ở phần mô tả cài đặt apt sẽ tìm và download package cowsay ở trên Repository là http://archive.ubuntu.com/ubuntu
    Địa chỉ này có thể được chọn khi cài hệ điều hành hoặc có thể thay đổi được ở file cấu hình
    Trong trường hợp mình dùng server ở VN thì có thay đổi là http://vn.archive.ubuntu.com/ubuntu giúp việc tải phần 
      mềm nhanh hơn
    Cách sửa cấu hình: Sửa ở file sources.list ở trong thư mục /etc/apt
      Ở trong file này có các dòng khai báo các Repository mà phần mềm quản lý sẽ lấy thông tin
      Băt đầu là chữ deb: Là mô tả loại gói dùng cho hệ điều hành họ Debian
      Tiếp theo là địa chỉ của Repository: http://archive.ubuntu.com/ubuntu
      xenial: là tên của hệ điều hành
      main restricted universe multiverse là 4 loại Repository chính
      Đổi sang địa chỉ là: http://vn.archive.ubuntu.com/ubuntu
    Sau khi sửa xong thì nhấn Ctrl+X để thoát ra khỏi trình editor nano(Ctrl+X, sau đó có 1 hộp thoại confirm hỏi có
      muốn lưu lại nội dung mới hay không -> nhấn Y để đồng ý, sau đó nhấn Ennter)
    Sau khi lưu xong thì cập nhật lại các package thấy rằng có 1 số Repository đã được đổi thành vn
      sudo apt install cowsay
        The following additional packages will be installed:
          cowsay-off
        Suggested packages:
          filters
        The following NEW packages will be installed:
          cowsay cowsay-off
      Do you want to continue? [Y/n] y
        Get:1 http://archive.ubuntu.com/ubuntu xenial/universe amd64 cowsay all 3.03+dfsg1-15 [18.0 kB]
        Get:2 http://archive.ubuntu.com/ubuntu xenial/universe amd64 cowsay-off all 3.03+dfsg1-15 [3,640 B]
      vagrant@local-server:/etc/apt$ sudo nano sources.list
        deb http://vn.archive.ubuntu.com/ubuntu xenial-updates universe
        deb http://archive.ubuntu.com/ubuntu xenial multiverse
        deb http://archive.ubuntu.com/ubuntu xenial-updates multiverse
      sudo apt update
        Get:12 http://vn.archive.ubuntu.com/ubuntu xenial/universe Translation-en [4,354 kB]
        Get:13 http://vn.archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages [989 kB]
        Get:14 http://vn.archive.ubuntu.com/ubuntu xenial-updates/main Translation-en [390 kB]
        Get:15 http://vn.archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages [7,616 B]
        Get:16 http://vn.archive.ubuntu.com/ubuntu xenial-updates/restricted Translation-en [2,272 B]
        Get:17 http://vn.archive.ubuntu.com/ubuntu xenial-updates/universe amd64 Packages [754 kB]
        Get:18 http://vn.archive.ubuntu.com/ubuntu xenial-updates/universe Translation-en [314 kB]
    Trong Ubuntu, ngoài cấu hình Repository qua file /etc/apt/sources.list, chúng ta có thể cấu hình Repository 
      bằng cách tạo bất kỳ file nào có đuôi là .list và đặt trong thư mục /etc/apt/sources.list.d/, ví dụ 
        /etc/apt/sources.list.d/virtualbox.list
    Trong trường hợp không kết nối đến Repository được thì chúng ta đổi sang Repository khác nhưng nên chọn 
      Repository nào gần vị trí Server nhất.
    Với các hệ điều hành khác, file cấu hình và thư mục cấu hình Repository sẽ khác với Ubuntu. Ví dụ trên 
      CentOS các file cấu hình sẽ có đuôi là .repo và nằm trong thư mục /etc/yum.repos.d/

====================================== Network ======================================
- SSH: 
  Là 1 giao thức quản trị từ xa của hệ điều hành Linux
  Đây là 1 giao thức truy cập từ xa an toàn và có mã hóa dữ liệu chứng thực
  Mô hình của nó là Client-Server trên nền TCP với cổng mặc là 22
  Cũng có thể dùng để bổ sung cơ chế an toàn cho các giao thức không an toàn khác

====================================== Process và Services ======================================
- Process: 
  Tiến trình là 1 chương trình đang thực thi và nó có các thuộc tính như sau:
    PID: Mã tiến trình(Process ID)
    UID: Chủ sở hữu
    GID: Nhóm sở hữu
    PPID: Tiến trình cha của nó, cũng là 1 tiến trình nhưng mà trong khi chạy nó lại tạo thêm các tiến trình khác,
      các tiến trình này có cùng thư mục làm việc, môi trường làm việc với tiến trình cha
  Quản lý tiến trình:
    Để quản lý tiến trình thì có các hành động sau:
      Dừng tiến trình(Stop)
      Khởi động lại tiến trình(Restart)
      Chuyển về chế độ chạy nền(Background)
    Để quản lý theo dõi tiến trình thì có thể dùng lệnh ps
      Lệnh này liệt kê ra các tiến trình
      CMD: Lệnh để thực hiện là lệnh nào
      bash: Là 1 shell script dùng để thông dịch các câu lệnh trên Linux
      ps: Lệnh chạy trên bash
        PID TTY          TIME CMD
      2102 pts/0    00:00:11 bash
      15553 pts/0    00:00:00 ps
    ps -A: Hiểu thị ra toàn bộ các process
      PID TTY          TIME CMD
        1 ?        00:00:20 systemd
        2 ?        00:00:00 kthreadd
        3 ?        00:00:06 ksoftirqd/0
      ...
      2102 pts/0    00:00:11 bash
      16057 ?        00:00:00 nginx
      16058 ?        00:00:00 nginx
      16089 pts/0    00:00:00 ps
      Tiến trình đầu tiền là tiến trình khởi động(Init Process) và có ID là 1, nó là cha của các tiến trình còn lại    
    Để dừng 1 tiến trình thì có thể dùng câu lệnh kill, để dùng câu lệnh này thì cần phải biết PID của tiến trình muốn
      dừng 
      Cách thực thi lệnh kill: kill + <ID của process(PID)>
      Lệnh này sẽ gửi tiến hiệu dừng chương trình và kiểu tín hiệu này gọi là SIGTERM, là tin hiệu thông báo cho chương
        trình là mình muốn đóng chương trình
      Ngoài cách gửi tín hiệu theo kiểu trên thì còn nhiều cách gửi tín hiệu khác
      Tín hiệu kiểu SIGKILL: Dùng trong trường hợp ví dụ như là chương trình không thể xử lý được tín hiệu SIGTERM thì lúc
        này sẽ gửi tín hiệu là SIGKILL, tín hiệu này sẽ gửi trực tiếp đên Init Process
        Cách thực thi: kill -9 <ID của process>
    Để dừng tiến trình thì nên gửi tín hiệu là SIGTERM, khi đó thì bản thân chương trình sẽ tự xử lý tín hiệu nhận được
      và đóng chương trình 1 cách an toàn, ví dụ như là trước khi đóng sẽ tự giải phóng tài nguyên hay là các hoạt động
      đang thực hiện
- Service:
  Là 1 ứng dụng hệ thống và nó thường được chạy ngầm để chờ và đáp ứng các yêu cầu gửi đến từ các chương trình khác
  Service còn được gọi với tên khác là deamons và nó thường kết thúc bằng ký tự d (ví dụ như là sshd)
  Mỗi 1 service sẽ có 1 file script nằm trong thư mục /etc/init.d dùng để tương tác với service đó
  Dùng lệnh service để quản lý các service, đối với các hệ điều hành mới thì có thể dùng các lệnh khác như: systemctl, 
    initctl
  service --status-all: Dùng để liệt kê tất cả các service ở trong máy
    Ở trước mỗi tên service sẽ có dấu + và dấu -, đó chính là trạng thái của service là đang bật hay là đang tắt
    +: Đang bật, một se đang bật thì đó chính là 1 process đang chạy ở chế độ Background(chạy ngầm), do đó chúng ta sẽ không
      thể nhìn thấy được kết quả ở trên màn hình
    -: Đang tắt
    [ + ]  acpid
    [ + ]  apparmor
    [ + ]  apport
    [ + ]  atd
    [ - ]  bootmisc.sh
    [ - ]  checkfs.sh
    [ - ]  checkroot-bootclean.sh
    [ - ]  checkroot.sh
  NGINX: Đây là 1 service rất thông dụng
    Cách cài thì cũng giống như cài các ứng dụng khác
    Sau khi cài xong thì dịch vụ này sẽ tự động bật
    Tác dụng của 1 NGINX đóng vai trò là 1 Web Server, khi người dùng truy cập vào server qua trình duyệt thì nó sẽ nhận
      được yêu cầu và tìm source code của website để trả về kết quả
    Để test thì có thể truy cập trên browser bằng địa chỉ ip là: http://172.20.20.20/
    Kết quả hiển thị sẽ là 1 file html có sẵn khi ta cài NGINX
    Vào thư mục /var/www/html và vào file .. để sửa nội dung hiển thị html bằng cách truy cập vào thư mục /var/www/html/
      và sửa nội dung của file index.nginx-debian.html
    Để tắt dịch vụ đi thì dùng lệnh stop
    Kiểm tra đoạn mã tương tác với service(nằm trong /etc/init.d)
      vagrant@local-server:/etc/init.d$ sudo apt install nginx
      The following additional packages will be installed:
        fontconfig-config fonts-dejavu-core libfontconfig1 libgd3 libjbig0 libjpeg-turbo8 libjpeg8
        libtiff5 libvpx3 libxpm4 nginx-common nginx-core
      Suggested packages:
        libgd-tools fcgiwrap nginx-doc ssl-cert
      The following NEW packages will be installed:
        fontconfig-config fonts-dejavu-core libfontconfig1 libgd3 libjbig0 libjpeg-turbo8 libjpeg8
        libtiff5 libvpx3 libxpm4 nginx nginx-common nginx-core
      Do you want to continue? [Y/n] y
      survice --status-all
      [ + ]  nginx
      vagrant@local-server:/etc/init.d$ ifconfig
        Link encap:Ethernet  HWaddr 08:00:27:5b:34:ec
        inet addr:172.20.20.20  Bcast:172.20.20.255  Mask:255.255.255.0
        inet6 addr: fe80::a00:27ff:fe5b:34ec/64 Scope:Link
        vagrant@local-server:/etc$ cd /var/www/html/
        vagrant@local-server:/var/www/html$ ls
        index.nginx-debian.html
        vagrant@local-server:/var/www/html$ sudo vi index.nginx-debian.html
        sudo service nginx stop
  Ở một số hệ điều hành, file HTML mặc định của Nginx nằm trong thư mục /usr/share/nginx/html (thay 
    vì /var/www/html).
  Đa số các service đều có file cấu hình dịch vụ và thường nằm trong thư mục /etc. Mỗi khi thay đổi cấu hình 
    thì phải khởi động lại service
  File cấu hình cho Nginx thường nằm ở thư mục /etc/nginx, trong đó file nginx.conf là file cấu hình chính, 
    các file cấu hình riêng cho website thường nằm ở /etc/nginx/conf.d hoặc /etc/nginx/sites-enabled/
- Service Cron:
  Server Cron được ứng dụng rất nhiều, có tác dụng thực hiện các tác vụ định kỳ vào 1 time cụ thể nào đó mà chúng
    ta định nghĩa, tác vụ này còn được gọi là Cron Job
  Mặc định thì service Cron đã được cài đặt và chạy sẵn, nên chỉ cần cấu hình qua lệnh crontab
  Để chỉnh sửa cấu hình thì dùng thêm tham số là -e
  Đối với lần đầu sử dụng thì sẽ được hỏi là dùng trình soạn thảo nào
  Để định nghĩa thời gian thì cấu hình 5 giá trị đó là phút, giờ, ngày, tháng và thứ.
    0: Chủ nhật
    1: Thứ 2
    2: Thứ 3
    ...
  Dấu * dùng để định nghĩa cho mỗi, hằng(mỗi phút, mỗi giây, hằng ngày, hằng giờ...)
  0 5 * * 1: Chạy vào 5 giờ sáng thứ 2 mỗi tuần
  Cú pháp: m h  dom mon dow   command
  command là câu lệnh sẽ thực thi khi đến giờ cài đặt
    vagrant@local-server:~$ crontab -e
    no crontab for vagrant - using an empty one
    Select an editor.  To change later, run 'select-editor'.
      1. /bin/ed
      2. /bin/nano        <---- easiest
      3. /usr/bin/vim.basic
      4. /usr/bin/vim.tiny
    Choose 1-4 [2]:
  Thực hành:
    Ở thư mục hiện hành(/home/vagrant) tạo ra 1 file là log.txt
    Demo cứ mỗi phút sẽ ghi 1 dòng chữ ở trong file log.txt này
    Sau khi cài đặt thông số xong thì chờ mỗi phút và kiểm tra lại file log.txt để xem kết quả
    Nếu không muốn nó chạy nữa thì cấu hình lại bằng cách xóa đoạn đã cấu hình hoặc Comment đoạn cấu hình đó

      vagrant@local-server:~$ touch log.txt
      vagrant@local-server:~$ cat log.txt
      vagrant@local-server:~$ crontab -e
        * * * * * echo "Backup vao luc `date`" >> log.txt
      no crontab for vagrant - using an empty one
      crontab: installing new crontab
      vagrant@local-server:~$
      vagrant@local-server:~$ cat log.txt
        Backup vao luc Mon Jul 15 09:11:01 UTC 2019
        Backup vao luc Mon Jul 15 09:12:01 UTC 2019
  Để xem các cấu hình của crontab mà không cần mở file cấu hình ta có thể dùng lệnh:  crontab -l
  Giá trị số tương ứng với các mốc thời gian:
    Minutes (phút): 0 - 59
    Hour (giờ): 0 - 23 (nửa đêm là 0 giờ)
    Day (ngày): 1 - 31
    Month (tháng): 1 - 12
    Weekday (thứ): 0 - 6 (ngày thứ 0 là Chủ Nhật)
  Có thể cấu hình nhiều mốc thời gian trong cùng 1 cột bằng cách dùng dấu phẩy để ngăn cách, ví dụ cấu 
    hình thời gian vào lúc 6h sáng và 6h tối mỗi ngày như sau: 
    * 6,18 * * * Command
  Một số biến dùng để thay thế cho cấu hình thời gian:
    @reboot: Thực hiện mỗi khi khởi động.
    @yearly: Thực hiện ngày 1/1 hàng năm (giống 0 0 1 1 *).
    @monthly: Thực hiện ngày 1 mỗi tháng (giống 0 0 1 * *).
    @weekly: Thực hiện vào ngày Chủ nhật hàng tuần (giống 0 0 * * 0).
    @daily: Thực hiện lúc nửa đêm mỗi ngày (giống 0 0 * * *).
    @hourly: Thực hiện mỗi giờ (giống 0 * * * *).

====================================== Terminal Shell ======================================

- SoftLink khác HardLink thế nào:
  Symbolic link: Chia làm 2 loại đó là SoftLink là HardLink
  SoftLink thì tương tự như tạo shortcut ở trong hệ điều hành của Window
  SoftLink thì có link đến cả file lẫn thư mục, còn HardLink thì chỉ có thể link đến file 
  Nếu file gốc ban đầu bị xóa thì SoftLink sẽ không thể hoạt động được nữa vì SoftLink giữ đường dẫn với tên file 
    cũ nhưng HardLink thì vẫn hoạt động được bình thường
  Ở trong ổ cứng có 1 giá trị đó là inode, là 1 con số mô tả vị trí các file trong ổ cứng
  Khi tạo HardLink thì ta sẽ tạo ra 1 file nữa cùng trỏ đến vị trí inode với file gốc
  Khi tạo SoftLink thì nó giống như 1 shortcut, shortcut này trỏ vào file gốc ban đầu
  Khi mở HardLink ra để sửa thì do nó cùng trỏ đến cùng 1 vị trí vật lý thông qua inode do đó các file có
    cùng inode sẽ có nội dung thay đổi theo
  Khi mở SoftLink ra để sửa thì hệ điều hành cũng sẽ mở trực tiếp file gốc -> do đó khi sửa nội dung của file 
    SoftLink cũng chính là sửa nội dung của file gốc
  Hiện tượng broken link sẽ xảy ra với loại file là SoftLink
  Các HardLink thì chỉ có thể tạo ra ở trên cùng 1 ổ cứng chứ không trỏ sang ổ cứng khác được, SoftLink thì do nó
    trỏ vào đường dẫn dạng shortcut nên nó có thể trỏ vào bất kỳ thư mục hay file ở trên cùng 1 ổ cứng hay khác ổ cứng
    đều được
  Thực hành:
    Tạo 1 file demo.txt và viết 1 nội dung bất kỳ vào trong file đó
    Dùng lệnh cp để copy file demo.txt sang 1 file mới đó là demo2.txt
    Sửa đổi nội dung của demo2.txt
    Xem lại nội dung của demo.txt và demo2.txt thì thấy nội dung khác nhau
    ls -ia: Thấy rằng mã hiệu inode của demo.txt(58487) khác với mã hiệu inode của demo2.txt(58488)
    Dùng lệnh tạo ra HardLink để tạo ra 1 file mới harddemo.txt từ file demo.txt ban đầu
    Thực hiện lại lệnh ls -ia: Thấy rằng demo.txt và harddemo.txt có cùng chung inode với nhau
    Thay đổi nội dung của harddemo.txt sau đó xem nội dung của demo.txt thì thấy nội dung của nó cũng thay đổi theo và
      giống với nội dung của harddemo.txt. Như vậy có nghĩa là khi sửa nội dung của harddemo.txt cũng chính là sửa Nội
      dung của demo.txt bởi vì cả 2 file này đều trỏ đến cùng 1 vị trí vật lý trên ổ cứng
    Tạo ra 1 SoftLink softdemo.txt từ demo.txt
    Thực hiện lại lệnh ls -li *.txt: Thấy rằng softdemo.txt trỏ đến demo.txt và inode của softdemo.txt(55702) cũng khác 
      với inode của demo.txt(58487)
    Dùng lệnh cat để xem nội dung của softdemo.txt và demo.txt thì thấy rằng nội dung giống nhau
    Thực hiện thay đổi nội dung của softdemo.txt rồi xem lại nội dung của softdemo.txt và demo.txt thì thấy rằng nội dung
      của 2 file này là giống nhau. Như vậy khi sửa đổi nội dung file SoftLink thì cũng chính là sửa đổi nội dung của file
      được trỏ đến
    Thay đổi tên file demo.txt -> mode.txt
    ls -li *.txt: Thấy rằng file demo.txt đã chuyển thành mode.txt nhưng softdemo.txt vẫn đang trỏ đến demo.txt(không còn
      tồn tại)
    Lúc này nếu dùng lệnh cat để mở file demo.txt thì sẽ không mở được nữa và hiện ra câu thông báo là: 'No such file or 
      directory' bởi vì ở đây SoftLink không trỏ vào inode mà nó trỏ theo tên file
    Thực hiện đổi lại mode.txt thành demo.txt rồi dùng cat để mở lại softdemo.txt thì thấy lại có thể xem được nội dung 
      của softdemo.txt
    Lại thực hiện thay đổi demo.txt thành mode.txt rồi thực hiện mở harddemo.txt thì vẫn mở được bình thường bởi vì HardLink
      nó trỏ vào inode, do vậy khi mà tên của file gốc thay đổi nhưng do inode của file gốc không đổi, nên HardLink nó vẫn
      trỏ vào đúng vị trí ở trên ổ cứng -> vẫn truy xuất được
      vagrant@local-server:~$ touch demo.txt
      vagrant@local-server:~$ ls
      demo.txt  log.txt  project  quang  quang.txt
      vagrant@local-server:~$ vim demo.txt
      vagrant@local-server:~$ cat demo.txt
        File goc ban dau
      vagrant@local-server:~$ cp demo.txt demo2.txt
      vagrant@local-server:~$ vim demo2.txt
      vagrant@local-server:~$ cat demo.txt
      File goc ban dau
      vagrant@local-server:~$ cat demo2.txt
      File goc ban dau 2
      vagrant@local-server:~$ ls -ia
        66358 .               58286 .bashrc     58481 log.txt   256029 quang              55702 .viminfo
          1979 ..             256012 .cache     256048 .nano      57971 quang.txt
        58438 .bash_history   58488 demo2.txt     741 .profile   58480 .selected_editor
        58276 .bash_logout    58487 demo.txt   256043 project    66361 .ssh
        vagrant@local-server:~$
      vagrant@local-server:~$ ln demo.txt harddemo.txt
      vagrant@local-server:~$ ls -ia *.txt
        58488 demo2.txt  58487 demo.txt  58487 harddemo.txt  58481 log.txt  57971 quang.txt
      vagrant@local-server:~$ cat demo.txt
        File goc ban dau
      vagrant@local-server:~$ cat harddemo.txt
        File goc ban dau
      vagrant@local-server:~$ vim harddemo.txt
      vagrant@local-server:~$ cat demo.txt
        File goc ban dau
        Hello Hell
      vagrant@local-server:~$ ls -li *.txt
        58488 -rw-rw-r-- 1 vagrant vagrant  19 Jul 15 11:01 demo2.txt
        58487 -rw-rw-r-- 2 vagrant vagrant  28 Jul 15 11:21 demo.txt
        58487 -rw-rw-r-- 2 vagrant vagrant  28 Jul 15 11:21 harddemo.txt
        58481 -rw-rw-r-- 1 vagrant vagrant 264 Jul 15 09:16 log.txt
        57971 -rw-rw-r-- 1 vagrant vagrant  48 Jul  7 11:13 quang.txt
        55702 lrwxrwxrwx 1 vagrant vagrant   8 Jul 15 11:26 softdemo.txt -> demo.txt
      vagrant@local-server:~$ cat demo.txt
        File goc ban dau
        Hello Hell
      vagrant@local-server:~$ cat softdemo.txt
        File goc ban dau
        Hello Hell
      vagrant@local-server:~$ vim softdemo.txt
      vagrant@local-server:~$ cat demo.txt
        File goc ban dau
        Hello Vietnam
      vagrant@local-server:~$ cat softdemo.txt
        File goc ban dau
        Hello Vietnam
      vagrant@local-server:~$ mv demo.txt mode.txt
      vagrant@local-server:~$ ls -li *.txt
        58488 -rw-rw-r-- 1 vagrant vagrant  19 Jul 15 11:01 demo2.txt
        58487 -rw-rw-r-- 2 vagrant vagrant  31 Jul 15 11:33 harddemo.txt
        58481 -rw-rw-r-- 1 vagrant vagrant 264 Jul 15 09:16 log.txt
        58487 -rw-rw-r-- 2 vagrant vagrant  31 Jul 15 11:33 mode.txt
        57971 -rw-rw-r-- 1 vagrant vagrant  48 Jul  7 11:13 quang.txt
        55702 lrwxrwxrwx 1 vagrant vagrant   8 Jul 15 11:26 softdemo.txt -> demo.txt
      vagrant@local-server:~$ cat softdemo.txt
        cat: softdemo.txt: No such file or directory
      vagrant@local-server:~$ mv mode.txt demo.txt
      vagrant@local-server:~$ cat softdemo.txt
        File goc ban dau
        Hello Vietnam
      vagrant@local-server:~$ mv demo.txt mode.txt
      vagrant@local-server:~$ cat harddemo.txt
        File goc ban dau
        Hello Vietnam
  Việc tạo ra SoftLink hay HardLink thì nó không tốn thêm dung lượng ổ cứng

====================================== Bash scripting ======================================
- Bash Script:
  Tìm hiểu về Shell Script mà cụ thể là Bash Script
  Thay vì việc phải tự gõ các câu lệnh để thực hiện nhiều thao tác phức tạp và mất thời gian thì có thể tự viết
    vào 1 file để thực thi nó và chúng ta gọi nó là Shell Script hay là Shell Program
  Ở trong Linux thì có nhiều loại Shell khác nhau như: SH Shell, DASH Shell, BASH Shell.
  Bash Shell là 1 Shell Script tiêu chuẩn và rất thông dụng
  Mặc định thì trong máy thường có sẵn khá nhiều bash script
    .bash_history: Lưu lịch sử 
    .bash_logout: File này sẽ chạy khi user thực hiện logout
    .bashrc
  .bash_logout: Nó cũng tương tự như file cấu hình của phần mềm
  vagrant@local-server:~$ pwd
    /home/vagrant
  vagrant@local-server:~$ ls -a | grep bash
    .bash_history
    .bash_logout
    .bashrc
  vagrant@local-server:~$ cat .bash_logout
    # ~/.bash_logout: executed by bash(1) when login shell exits.
    # when leaving the console clear the screen to increase privacy
    if [ "$SHLVL" = 1 ]; then
        [ -x /usr/bin/clear_console ] && /usr/bin/clear_console -q
    fi
  Thực hành:
    Login vào tài khoản là quang
    Sửa file .bash_logout bằng cách thêm vào 1 đoạn script: echo "quang da logout" >> logout.txt có tác dụng
      là ghi ra 1 câu thông báo là "quang da logout" vào file logout.txt
    Ban đầu thì vẫn chưa có file logout.txt này
    Tiến hành logout ra khỏi tài khoản quang
    Vào trong thư mục /home/quang để kiểm tra thì thấy đã xuất hiện file logout.txt
    Đọc nội dung của file thì thấy nó cũng in ra nội dung 'quang da logout'
      vagrant@local-server:~$ sudo login quang
        Password:
        Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-154-generic x86_64)
        * Documentation:  https://help.ubuntu.com
        * Management:     https://landscape.canonical.com
        * Support:        https://ubuntu.com/advantage
        15 packages can be updated.
        8 updates are security updates.
      quang@local-server:~$ ls -la | grep bash
        -rw------- 1 quang quang  729 Jul 15 17:26 .bash_history
        -rw-r--r-- 1 quang quang  257 Jul 15 17:22 .bash_logout
        -rw-r--r-- 1 quang quang 3771 Jul  7 16:31 .bashrc
      quang@local-server:~$ sudo vim .bash_logout
      quang@local-server:~$ ls -la
        total 32
        drwxr-xr-x 3 quang quang 4096 Jul 15 17:35 .
        drwxr-xr-x 5 root  root  4096 Jul  7 16:31 ..
        -rw------- 1 quang quang  729 Jul 15 17:26 .bash_history
        -rw-r--r-- 1 quang quang  257 Jul 15 17:22 .bash_logout
        -rw-r--r-- 1 quang quang 3771 Jul  7 16:31 .bashrc
        drwx------ 2 quang quang 4096 Jul 15 17:30 .cache
        -rw-r--r-- 1 quang quang  655 Jul  7 16:31 .profile
        -rw-r--r-- 1 quang quang    0 Jul 15 17:08 .sudo_as_admin_successful
        -rw------- 1 quang quang 3606 Jul 15 17:35 .viminfo
      quang@local-server:~$ logout
      vagrant@local-server:~$ cd /home/quang/
      vagrant@local-server:/home/quang$ ls
        logout.txt
      vagrant@local-server:/home/quang$ cat logout.txt
        quang da logout
    Tự viết 1 file bash script của mình với tên là myscript
    Ở dòng đầu tiên của script thì phải khai báo loại ngôn ngữ mà mình sử dụng, ở đây mình dùng bash nên sẽ phải
      khai báo #!/bin/bash
    /bin/bash là đường dẫn trỏ đến lệnh bash
    script đơn giản có tác dụng in ra màn hình 1 vài dòng message
    Dùng lệnh bash để chạy script
    Ngoài ra thì còn có 1 cách chạy khác nữa đó là cấp quyền execute cho script sau đó chạy bằng lệnh là ./<tên script>
      vagrant@local-server:~$ vim myscript
        #!/bin/bash
        echo ""
        echo "Hello my friends"
        echo "---"
        date
        echo "---"
      vagrant@local-server:~$ bash myscript
        Hello my friends
        ---
        Mon Jul 15 17:55:15 UTC 2019
        ---
      vagrant@local-server:~$ ls -l
        total 28
        -rw-rw-r-- 1 vagrant vagrant   80 Jul 15 17:53 myscript
      vagrant@local-server:~$ chmod u+x myscript
      vagrant@local-server:~$ ls -l
        total 28
        -rwxrw-r-- 1 vagrant vagrant   80 Jul 15 17:53 myscript
      vagrant@local-server:~$ ./myscript
        Hello my friends
        ---
        Mon Jul 15 18:00:33 UTC 2019
        ---
  Để xem các Shell mà hệ điều hành đã có dùng lệnh cat /etc/shells, nếu chưa có thì cài như các package bình thường.

- Biến, tham số:
  Sử dụng Variable(biến) để khiến cho script của chúng ta linh động hơn
  Biến trong Bash Script cũng tương tự như ở trong các ngôn ngữ khác, tuy nhiên nó chỉ có 4 kiểu dữ liệu đó là: String, Integer, 
    Constant và Array. String cà Integer là 2 kiểu dữ liệu thông dụng
  Khai báo biến thì sẽ bắt đầu bằng tên biến
  Ở dấu = phải viết liền và không được phép có dấu cách
  Khi sử dụng biến thì phải thêm $ vào đằng trước
  Một biến thì có thể đặt tên theo kiểu viết thường hoặc viết hoa
    vagrant@local-server:~$ vim myscript
      #!/bin/bash
      MESSAGE="hello"
      AGE=10
      echo $MESSAGE
      echo $AGE
    vagrant@local-server:~$ bash myscript
      hello
      10
    vagrant@local-server:~$ vim myscript 
      #!/bin/bash
      MESSAGE="hello"
      AGE=10
      name="quang"
      echo $MESSAGE
      echo $AGE
      echo $name 
    vagrant@local-server:~$ bash myscript
      hello
      10
      quang
  Ngoài ra còn có 1 số biến đặc biệt, gọi là tham số, đó là khi chúng ta gọi script chúng ta truyền tham số vào
    bash myscript abc -> tham số sẽ có giá trị abc
  Chúng ta sẽ lấy các giá trị tham số này vào trong script
  $1 tương ứng với giá trị của tham số đầu tiên
  $2 tương ứng với giá trị của tham số thứ 2
  Khi không truyền tham số thì sẽ không có giá trị của tham số đó khi thực hiện bash
    vagrant@local-server:~$ vim myscript
      #!/bin/bash
      number1=$1
      number2=$2
      echo "Tham so thu 1: "$number1
      echo "Tham so thu 2: "$number2
    vagrant@local-server:~$ bash myscript
      Tham so thu 1:
      Tham so thu 2:
    vagrant@local-server:~$ bash myscript abc 123
      Tham so thu 1: abc
      Tham so thu 2: 123
  Thực hành với script cho phép người dùng truyền vào 1 số bất kỳ và in ra màn hình kết quả là bình phương của số đó
  Để thực hiện phép tính với số thì cần phải có 2 cặp ngoặc tròn và bên trong sẽ là phép tính
    vagrant@local-server:~$ vim myscript
      #!/bin/bash
      kq=$(($1 * $1))
      echo "Binh phuong cua $1 la $kq"
    vagrant@local-server:~$ bash myscript 3
      Binh phuong cua 3 la 9
  Ngoài biến sử dụng trong script, chúng ta cũng có thể sử dụng biến ở bên ngoài gọi là biến môi trường, có thể gán trực 
    tiếp như trong script hoặc dùng lệnh export 
    export message=hello

- Lệnh điều kiện:
  Trong ngoặc vuông[] của if là điều kiện
  Ở giữa then và fi là các lệnh thực hiện khi điều kiện đúng
    if[điều kiện]
    fi
  Trong trường hợp có else, nghĩa là kiểm tra cả điều kiện sai nữa thì phần giữa then và else là phần điều kiện đúng, phần giữa
    else và fi là phần điều kiện sai. Có thể đặt if và then trên cùng 1 dòng nhưng phải dùng dấu phẩy để ngăn cách
    if[điều kiện]; then
    else
    fi
  Để kiểm tra 1 biến giá trị của nó là rỗng hay không tồn tại thì dùng tham số là -z
  Trường hợp sau then không xử lý gì thì vẫn phải có 1 câu lệnh gì đó ở trong đó
    vagrant@local-server:~$ vim myscript
      #!/bin/bash
        kq=0
      if [ -z $1 ]; then
        echo "Xin vui long truyen vao 1 so"
      else
        kq=$(($1 * $1))
        echo "Binh phuong cua $1 la $kq"
      fi
    vagrant@local-server:~$ bash myscript
      Xin vui long truyen vao 1 so
    vagrant@local-server:~$ bash myscript 5
      Binh phuong cua 5 la 25
  So sánh:
    -gt: Lớn hơn
    -lt: Bé hơn
    -le: Nhỏ hơn hoặc bằng
  Điều kiện hoặc: -o
  Điều kiện và: -a
  Phủ định: !
    vagrant@local-server:~$ vim myscript
      #!/bin/bash
      kq=0
      if [ -z $1 -o $1 -le 0 ]; then
      echo "Xin vui long truyen vao 1 so lon hon 0"
      else
      kq=$(($1 * $1))
      echo "Binh phuong cua $1 la $kq"
      fi
    vagrant@local-server:~$ bash myscript 0
      Xin vui long truyen vao 1 so lon hon 0
    vagrant@local-server:~$ bash myscript -1
      Xin vui long truyen vao 1 so lon hon 0
    vagrant@local-server:~$ bash myscript 2
      Binh phuong cua 2 la 4
  Lệnh so sánh với chuỗi:
    s1 = s2	Kiểm tra s1 = s2
    s1 != s2	Kiểm tra s1 khác s2
    -z s1	Kiểm tra s1 có kích thước bằng 0
  Lệnh kiểm tra file (nói chung cho cả tệp và thư mục)
    -f file	Kiểm tra xem file có phải là tệp hay không
    -d file	Kiểm tra xem file có phải là thư mục hay không
    -r file	Kiểm tra file có đọc (read) được hay không
    -w file	Kiểm tra file có ghi (write) được hay không
    -x file	Kiểm tra file có thực thi (execute) được hay không
    -s file	Kiểm tra file có kích thước lớn hơn 0 hay không
    -e file	Kiểm tra xem file có tồn tại hay không
  Demo:
    #!/bin/bash
    if [ -f "/home/robinhuy/demo.sh" ]; then
        echo "This is file"
    else
        echo "This is directory"
    fi